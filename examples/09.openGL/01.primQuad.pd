#N canvas 50 20 769 629 10;
#X obj 469 17 gemhead;
#X obj 468 504 GEMglEnd;
#X obj 469 233 GEMglColor4f 1 0 0 0;
#X obj 469 254 GEMglVertex3f -1 0 0;
#X obj 469 366 GEMglColor3f 0 1 0;
#X obj 468 387 GEMglVertex3f 1 0 0;
#X obj 469 307 GEMglColor3f 0 0 1;
#X obj 469 330 GEMglVertex3f 0 -1 0;
#X floatatom 502 45 5 0 0;
#X obj 469 77 GEMglRotatef 0 1 1 1;
#X obj 21 337 gemwin;
#X msg 53 120 create;
#X msg 56 241 destroy;
#X msg 54 311 reset;
#X obj 54 285 loadbang;
#X obj 76 164 tgl 30 0 empty empty empty 0 -6 0 8 -262144 -1 -1 1 1
;
#X obj 605 127 GLdefine GL_SMOOTH;
#X obj 605 105 loadbang;
#X obj 605 147 loadbang;
#X obj 605 169 GLdefine GL_POLYGON;
#X obj 469 187 GEMglBegin;
#X obj 469 145 GEMglShadeModel;
#X obj 621 487 loadbang;
#X obj 468 527 GEMglShadeModel;
#X obj 621 509 GLdefine GL_FLAT;
#X text 52 17 this is an example how to use Gem as an openGL-wrapper:
;
#X text 47 79 you can use "any" openGL-command (like "glBegin") as
a Gem-object with a prepended "GEM" (like [GEMglBegin]);
#X text 32 378 to make use of GL-constants (like "GL_TRIANGLE") \,
use the object [GLdefine] \, that maps symbols to their corresponding
values.;
#X obj 468 436 GEMglColor3fv 1 1 0;
#X obj 468 459 GEMglVertex3fv 0 1 0;
#X msg 613 413 1 0 1;
#X msg 655 413 1 1 0;
#X floatatom 650 260 3 0 100;
#X obj 650 281 * 0.01;
#X msg 672 103 bang;
#X connect 0 0 9 0;
#X connect 1 0 23 0;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 4 0 5 0;
#X connect 5 0 28 0;
#X connect 6 0 7 0;
#X connect 7 0 4 0;
#X connect 8 0 9 1;
#X connect 9 0 21 0;
#X connect 11 0 10 0;
#X connect 12 0 10 0;
#X connect 13 0 10 0;
#X connect 14 0 13 0;
#X connect 15 0 10 0;
#X connect 16 0 21 1;
#X connect 17 0 16 0;
#X connect 18 0 19 0;
#X connect 19 0 20 1;
#X connect 20 0 2 0;
#X connect 21 0 20 0;
#X connect 22 0 24 0;
#X connect 24 0 23 1;
#X connect 28 0 29 0;
#X connect 29 0 1 0;
#X connect 30 0 28 1;
#X connect 31 0 28 1;
#X connect 32 0 33 0;
#X connect 33 0 6 2;
#X connect 34 0 16 0;
