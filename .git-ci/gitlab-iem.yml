---
###################################################
### configuration templates (to be used for snapshot and release builds)
variables:
  PDVERSION:
    value: 0.54-1
    description: "The Pd-version against which to build"
  LANG:
    value: "C"
    description: ""
  MACOSX_DEPLOYMENT_TARGET:
    # compatibility for older OSX-builds (<mutex> requires C++11, available since OSX10.9/Mavericks)
    value: "10.9"
    description: "For macOS builds, specify the minimum version where Gem should run on"
  ARTIFACTSDIR:
    value: 'artifacts'
    description: ""
  IEM_CI_TMPDIR:
    value: ".git-ci/_tmp/"
    description: ""
  IEM_CI_JOBS:
    value: ""
    description: "list of jobs to run (leave empty for all jobs)"
  gem_defaultwindow:
    value: "gemglfw3window"
    description: "default window backend"
  GIT_SUBMODULE_STRATEGY: recursive
  #GIT_SUBMODULE_DEPTH: 1

stages:
  - build
  - test
  - sign
  - deploy

.artifacts:
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - "${ARTIFACTSDIR}"
    when: always

.run-selected:
  rules:
    # run if IEM_CI_JOBS list is empty
    - if: $IEM_CI_JOBS == ""
    # run if CI_JOB_NAME is in the IEM_CI_JOBS list
    - if: $CI_JOB_NAME =~ $IEM_CI_JOBS
    # otherwise, don't run
    - when: never

.script:zsh_compat: &script_zsh_compat
  - | # zsh fixes
    set -o shwordsplit || true     # zsh doesn't do wordsplitting by default...
    set -o nonomatch   || true     # zsh bails out if globbing patterns do not expand

.script:set_destdir: &script_set_destdir
  - DESTDIR="$(pwd)/${ARTIFACTSDIR}/${CI_JOB_NAME%%-*}"


.image:windows:
  tags:
    - sardinecake
  image: registry.git.iem.at/devtools/sardinecake/windows:latest

.image:macos:
  tags:
    - tart
  image: ghcr.io/cirruslabs/macos-monterey-xcode:latest

.build:
  stage: build
  variables:
    localdeps: ".git-ci/iem-ci/localdeps/localdeps"
  script:
    - *script_zsh_compat
    # set SOURCE_DATE_EPOCH for reproducible builds
    - export SOURCE_DATE_EPOCH="$(date --date="${CI_COMMIT_TIMESTAMP}" +%s 2>/dev/null || date -j -f %Y-%m-%dT%H:%M:%S%z "$(echo ${CI_COMMIT_TIMESTAMP} | sed -e 's|\([+-][0-9][0-9]\):\([0-9][0-9]\)$|\1\2|')" +%s || echo ${SOURCE_DATE_EPOCH})"
    - echo "${CI_COMMIT_TIMESTAMP} -> ${SOURCE_DATE_EPOCH}"
    # handle Pd64 jobs
    - if test "${OS}" = "Windows_NT"; then defaultext="dll"; else defaultext="so"; fi
    # - gnutriplet="$(g++ -dumpmachine)"
    - arch="${CI_JOB_NAME%-[0-9][0-9]}"
    - floatsize="${CI_JOB_NAME#${arch}}"
    - floatsize="${floatsize#-}"
    - test "${floatsize}" != 32 || floatsize=""
    - test -z "${floatsize}" || pd_extension="${arch}-${floatsize}.${defaultext}"
    - if test "${OS}" = "Windows_NT"; then gnutriplet="${CI_JOB_NAME}"; else gnutriplet="${arch}"; fi
    - configure_floatsize="${floatsize:+--with-floatsize=${floatsize}}"
    # on Windows, plugins link against Gem, so we cannot share them between floatsizes; other platforms are fine
    - test -z "${floatsize}" || test "${OS}" = "Windows_NT" || configure_floatsize="${configure_floatsize} --disable-plugins"
    - echo "arch=${arch} pd_extension=${pd_extension} floatsize=${floatsize}"
    # print some system information
    - echo building against Pd-${PDVERSION}
    - echo building with ${NUMBER_OF_PROCESSORS:=$(nproc || sysctl -n hw.ncpu || echo 1)} CPUs
    - tools/systeminfo.sh || true
    - date
    - which autoreconf aclocal glibtoolize libtoolize autoconf autoheader automake g++ || true
    - for tool in autoreconf aclocal libtoolize glibtoolize autoconf autoheader automake; do "${tool}" --version | grep "^${tool}" || true; done || true
    - g++ -v
    # the actual build
    - mkdir -pv "${ARTIFACTSDIR}"
    - autoreconf -fiv || ./autogen.sh
    - ./configure --disable-dependency-tracking ${TARGETARCH:+--host=}${TARGETARCH} ${fat_binary:+--enable-fat-binary=}${fat_binary} ${PDDIR:+--with-pd=}${PDDIR} ${pd_extension:+--with-extension=}${pd_extension} ${configure_floatsize} ${gem_defaultwindow:+--with-defaultwindow=}${gem_defaultwindow} --with-DeckLink=local || true
    - test -n "${CI_COMMIT_TAG}" || cp -v config.log "${ARTIFACTSDIR}"
    - make check -j"${NUMBER_OF_PROCESSORS}"
    - *script_set_destdir
    # "
    - make install DESTDIR="${DESTDIR}" libdir=/ extradir=/Gem includedir=/Gem/include
    # make Gem-plugins co-installable
    - find "${DESTDIR}" "(" -name "gem_*.so" -or -name "gem_*.dll" ")" -exec .git-ci/rename-gnutriplet.sh -a "${gnutriplet}" {} "+"
    # finally split the binaries from the debug information
    - base_dir_ci=$(pwd)
    - cd "${DESTDIR}/Gem"
    - du -sh
    - |
      "${base_dir_ci}/.git-ci/split-debug" ${pd_extension:+*.${pd_extension}} *.pd_* *.?_* *.dll *.so || echo "ignoring problems when splitting debug info"
    - du -sh
    - cd "${base_dir_ci}"
    - test "${result}" != "skip" || exit 77
  allow_failure:
    exit_codes:
      - 77

.build:linux:
  extends:
    - .build
  image: registry.git.iem.at/devtools/docker/debiancross:amd64
  before_script:
    - tools/systeminfo.sh || true
    - date
    - mkdir -p /etc/apt/sources.list.d/
    - find /etc/apt/sources.list /etc/apt/sources.list.d/ -name "*.list" -type f -exec egrep "^deb " {} ";" | sed -e 's|^deb |deb-src |' > /etc/apt/sources.list.d/${CI_COMMIT_REF_SLUG}.list
    - apt-get update
    - apt-get install ${TARGETDEBARCH:+-a}${TARGETDEBARCH} puredata-dev puredata-core
    - apt-get build-dep ${TARGETDEBARCH:+-a}${TARGETDEBARCH} gem || true
    - apt-get install git
    - g++ -v

.build:macos:
  extends:
    - .image:macos
    - .build
  retry:
    max: 1
    when:
      - runner_system_failure
  variables:
    CXXFLAGS: "-std=c++11 -g -O2"
    fat_binary: "x86_64,arm64"
    HOMEBREW_NO_ANALYTICS: 1
    HOMEBREW_NO_INSTALL_UPGRADE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
    CODESIGNFLAGS: --timestamp --strict --force
  before_script:
    - *script_zsh_compat
    - tools/systeminfo.sh || true
    - date
    # cleanup brew (tart is broken)
    - brew uninstall -f android-ndk android-sdk temurin8 libimobiledevice ideviceinstaller ios-deploy fastlane libusb libusbmuxd || true
    - brew unlink libpng || true
    - brew list --full-name || true
    - brew update || true
    # make sure we have a good gitlab runner
    - mkdir -p /usr/local/bin/
    - |
      : "${GITLAB_ARCH:=$(uname -m | sed -e 's|^x86_64$|amd64|' -e 's|^aarch64$|arm64|')}"
    - |
      : "${GITLAB_OS:=$(uname -s | tr '[:upper:]' '[:lower:]')}"
    - |
      : "${GITLAB_VERSION:=latest}"
    - |
      echo "fallback gitlab-runner ${GITLAB_VERSION} ${GITLAB_OS}-${GITLAB_ARCH}"
    - (which gitlab-runner; gitlab-runner --version) || brew install gitlab-runner || true
    - (which gitlab-runner; gitlab-runner --version) || curl -o /usr/local/bin/gitlab-runner "https://gitlab-runner-downloads.s3.amazonaws.com/${GITLAB_VERSION}/binaries/gitlab-runner-${GITLAB_OS}-${GITLAB_ARCH}" && chmod +x /usr/local/bin/gitlab-runner || true
    - (which gitlab-runner; gitlab-runner --version) || true

    # download Pd
    - rm -rf /Applications/Pd*.app/
    - curl -sL http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz | tar --extract --gzip --directory /Applications/ || mkdir -p "${IEM_CI_TMPDIR}"
    # if there was no tarball, try to get a zip-file
    - test ! -d "${IEM_CI_TMPDIR}" || curl -sL -o "${IEM_CI_TMPDIR}"/Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.macos.zip
    - test ! -f "${IEM_CI_TMPDIR}"/Pd.zip || unzip "${IEM_CI_TMPDIR}"/Pd.zip -d "${IEM_CI_TMPDIR}"
    # the ZIP-file shoud contain a .dmg containing Pd
    - |
      for dmg in "${IEM_CI_TMPDIR}"/Pd*.dmg ; do break; done
    - pddisk=""
    - test ! -f "${dmg}" || pddisk=$(hdiutil attach "${dmg}" 2>/dev/null | egrep "^/.*/Volumes/" | tail -1 | awk '{print $NF}')
    - rm -rf "${dmg}"
    - |
      for app in "${pddisk}"/Pd*.app "${IEM_CI_TMPDIR}"/Pd*.app; do if test -d "${app}"; then cp -r "${app}" /Applications/; break; fi; done
    - test ! -d "${pddisk}" || umount "${pddisk}"
    - |
      rm -rf "${IEM_CI_TMPDIR}" | true
      dmg=""
      pddisk=""
      app=""

    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - export PDDIR=$(find /Applications/Pd*.app/Contents/Resources -maxdepth 1 -type d -print -quit)
    - echo "PD=${PD}"
    - echo "PDDIR=${PDDIR}"
    # urgh: these are provided as fat variants, but must be uninstalled manually, for whatever reason.
    - brew uninstall --force --ignore-dependencies zstd xz lz4
    - brew bundle --no-upgrade --file=.git-ci/macOS.brew || true
    - brew list --full-name || true
    - libtoolize --version || glibtoolize --version || brew install libtool || true
    # older versions of assimp are broken with clang>=14
    - sed -e 's|^\([[:space:]]*mTextureCoordsNames = new aiString \*\[AI_MAX_NUMBER_OF_TEXTURECOORDS\]\) {};[[:space:]]*$|\1; for (size_t i=0; i<AI_MAX_NUMBER_OF_TEXTURECOORDS; ++i) {mTextureCoordsNames[i] = nullptr;}|' -i.bak "$(brew --cellar)"/assimp-fat/5.2*/include/assimp/mesh.h || true
    - /usr/local/opt/gettext/bin/gettextize || true
    - date
    - echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}"
  after_script:
    - *script_zsh_compat
    - *script_set_destdir
    - mkdir -p "${DESTDIR}"
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${DESTDIR}" -type f "(" -name "*.${pd_extension:-d_*}" -o -name "*.pd_darwin" -o -name "*.so" ")" -exec "${localdeps}.macos.sh" -F -v -d ".${depdir}" {} +
    - IEM_SIGN_SRCDIR="${DESTDIR}"
    - !reference [.script:codesign:macos]

.build:w64:
  extends:
    - .image:windows
    - .build
  variables:
    IEMCI_CONFIGURATIONS: mingw64
    pd_downloadsuffix: .msw.zip
  before_script:
    - tools/systeminfo.sh || true
    - export PDDIR="$(pwd)/_pd"
    - |
      : ${pd_download_url:="http://msp.ucsd.edu/Software/pd-${PDVERSION}${pd_downloadsuffix}"}
    - downloadfile="${pd_download_url##*/}"
    - echo wget -q -O "${downloadfile}" "${pd_download_url}"
    - wget -q -O "${downloadfile}" "${pd_download_url}"
    - mkdir -p "${PDDIR}"
    - test "x${downloadfile}" = "x${downloadfile%.zip}" || unzip -q "${downloadfile}" -d "${PDDIR}"
    - mv -v "${PDDIR}"/*/* "${PDDIR}"
    - rm -f "${downloadfile}"
    - rm -f "${PDDIR}"/bin/msvcr*.dll
    - export PD="${PDDIR}/bin/pd.com"
    - result=0
    - pacman --noconfirm -S --needed $(sed -e 's|#.*||' -e "s|@MINGW@|${MINGW_PACKAGE_PREFIX}-|" -e '/^\s*$/d' .git-ci/msys2.pacman | while read -r pkg _; do ! pacman -Sp "${pkg}" >/dev/null || echo "${pkg}"; done)
    # if pacman failed, try to continue (but do not mark the run as 'success')
    - echo "pacman returned ${result}"
    - test "${result}" = "0" || result="skip"
  after_script:
    - *script_set_destdir
    - mkdir -p "${DESTDIR}"
    - depdir="${CI_JOB_NAME%-[0-9][0-9]}"
    - find "${DESTDIR}" -type f "(" -name "*.${pd_extension:-m_*}" -o -name "*.dll" -o -name "*.exe" -o -name "*.com" ")" -exec "${localdeps}.win.sh" -v -d ".${depdir}" {} +

.build:w32:
  extends:
    - .build:w64
  variables:
    IEMCI_CONFIGURATIONS: mingw32
    pd_downloadsuffix: -i386.msw.zip
    CXXFLAGS: "-g -O2 -fexceptions"

###################################################
### the actual jobs: (linux,macos,windows)*(release,snapshot)

source:
  extends:
    - .artifacts
    - .run-selected
  stage: build
  before_script:
    # we need 'git' to create a source package
    - apt-get update && apt-get --no-install-recommends -y install git
  script:
    # create a source package
    - git archive --format=tar --prefix="${ARTIFACTSDIR}/${CI_JOB_NAME}}/${CI_PROJECT_NAME}/" HEAD | tar xf -

linux-amd64-32:
  extends:
    - .build:linux
    - .artifacts
    - .run-selected
  variables:
    pd_extension: "pd_linux"
darwin-fat-32:
  extends:
    - .build:macos
    - .artifacts
    - .run-selected
  variables:
    pd_extension: "d_fat"
windows-i386-32:
  extends:
    - .build:w32
    - .artifacts
    - .run-selected
  variables:
    pd_extension: "dll"
windows-amd64-32:
  extends:
    - .build:w64
    - .artifacts
    - .run-selected
  variables:
    pd_extension: "m_amd64"

# Pd64
linux-amd64-64:
  extends: linux-amd64-32
darwin-fat-64:
  extends: darwin-fat-32
windows-amd64-64:
  extends: windows-amd64-32
  variables:
    pd_download_url: "https://get.puredata.info/pure-data/releases/${PDVERSION}-pd64/Pd64-${PDVERSION}.msw.zip"

distcheck:
  extends:
    - .build:linux
    - .run-selected
  stage: test
  dependencies: []
  needs: []
  script:
    - tools/systeminfo.sh || true
    - date
    - g++ -v
    - mkdir -pv "${ARTIFACTSDIR}"
    - autoreconf -fiv || ./autogen.sh
    - ./configure --disable-dependency-tracking ${TARGETARCH:+--host=}${TARGETARCH} --without-ALL ${PDDIR:+--with-pd=}${PDDIR} || true
    - make distcheck -j2

# check if the 'dist' package includes all relevant files
# ignored files are read from the .git-ci/nodist file
nodist:
  stage: test
  dependencies: []
  needs: []
  rules:
    # run if IEM_CI_JOBS list is empty
    - if: $IEM_CI_JOBS == ""
      exists:
        - ".git-ci/nodist"
    # run if CI_JOB_NAME is in the IEM_CI_JOBS list
    - if: $CI_JOB_NAME =~ $IEM_CI_JOBS
      exists:
        - ".git-ci/nodist"
    # otherwise, don't run
    - when: never
  image: debian:stable
  before_script:
    - apt-get update -y
    - apt-get install -y --no-install-recommends git build-essential autoconf automake libtool pkg-config freeglut3-dev puredata-dev
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global --list || true
  script:
    ## pre-cleanup
    # get rid of gitignores
    - git ls-tree -r HEAD --name-only -z | grep --null-data "\.gitignore" | xargs -0 rm
    - git commit -a -m "Drop .gitignore files"
    ## create 'make dist' package
    - autoreconf -fiv || ./autogen.sh
    - ./configure --without-ALL
    - mkdir -p .git-ci
    - rm -rf .git-ci/Gem .git-ci/Gem.*gz
    # create 'make dist' package
    - make dist distdir=.git-ci/Gem
    ## restore the source dir from the 'make dist' package
    - find . -mindepth 1 -maxdepth 1 "(" -not -name ".git" -a -not -name ".git-ci" ")" -exec rm -rf {} +
    - tar -x -f .git-ci/Gem.*gz --strip-components=2
    ## ensure that the restored folder contains only the changes we want to see
    # drop files not tracked by git (e.g. generated autotools helpers)
    - git clean -fdx
    # restore files that need not be distributed
    - git checkout --pathspec-from-file=.git-ci/nodist
    ## show differences
    - git status -s
    - git diff-index --quiet HEAD


macOS:notarize:
  stage: deploy
  image: python:alpine
  dependencies:
    - darwin-fat-32
    - darwin-fat-64
  needs:
    - darwin-fat-32
    - darwin-fat-64
  variables:
    IEM_NOTARIZE_SRCDIR: artifacts
    IEM_NOTARIZE_ARCHIVE: Gem.zip
  before_script:
    - apk add zip git
  script:
    - !reference [.script:notarize:macos]
  allow_failure: true


deken:
  extends:
    - .run-selected
  stage: deploy
  image: registry.git.iem.at/pd/deken:latest
  before_script:
    - apt-get update -y
    - apt-get install -y --no-install-recommends git
    # per default, use the tag as the version
    - version="${CI_COMMIT_TAG}"
    - gitversion="$(git describe --always)"
    # if there is not tag (but we are on the default branch), publish a snapshot
    - test -n "${version}" || test "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" || version="$(git describe --abbrev=0)-snapshot"
    - version="${version#v}"
    - echo "${version}"
    - test -n "${CI_COMMIT_TAG}" || test ! -e .git-ci/README.snapshot.pd.in || sed -e "s|@build-date@|${CI_PIPELINE_CREATED_AT}|g" -e "s|@version@|${gitversion}|g" .git-ci/README.snapshot.pd.in > README.deken.pd
  script:
    - chmod -R u+rw,go-w ${ARTIFACTSDIR}/
    # remove ltlib leftovers
    - find ${ARTIFACTSDIR}/ "(" -name "*.la" -or -name "*.a" ")" -delete
    # remove debug information
    - find ${ARTIFACTSDIR}/ -name "*.debug" -delete
    # inject any README.deken
    - for f in README.deken.*; do [ -e "${f}" ] || continue; for d in ${ARTIFACTSDIR}/*/${CI_PROJECT_NAME}/; do cp "${f}" "${d}" || true; done; done
    # create deken packages
    - for d in ${ARTIFACTSDIR}/*/${CI_PROJECT_NAME}/; do deken package --version="${version}" "${d}"; done
    # upload deken packages
    - test -z "${version}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: deken-package
    paths:
      - ./*.dek
      - ./*.dek.*

# out SAST jobs don't have any prerequisites, so run them early...
sast:
  dependencies: []
  needs: []

include:
  # for the codesign templates
  - https://git.iem.at/pd/iem-ci/-/raw/main/pd-lib-builder/codesign.yml
  # additionally run some static code analysis
  - template: Security/SAST.gitlab-ci.yml
