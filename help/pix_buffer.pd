#N canvas 264 242 658 405 10;
#X text 452 8 GEM object;
#X obj 9 265 cnv 15 430 135 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 40 267 Inlets:;
#X obj 9 227 cnv 15 430 30 empty empty empty 20 12 0 14 -195568 -66577
0;
#X text 18 226 Arguments:;
#X obj 8 56 cnv 15 430 165 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 447 79 cnv 15 200 100 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 453 60 Example:;
#X obj 451 89 cnv 15 190 80 empty empty empty 20 12 0 14 -24198 -66577
0;
#X text 71 31 Class: pix object;
#X text 29 57 Description: a storage place for a number of images;
#X text 11 79 [pix_buffer] is a named storage place for images. It
is quite similar to pd's [table] object (but you cannot open it and
have a look at it's contents).;
#X text 50 11 Synopsis: [pix_buffer];
#X text 10 170 To write data to the [pix_buffer] or get images from
it \, you have to use separate objects [pix_buffer_write] and [pix_buffer_read]
;
#X text 24 281 Inlet 1: bang: get the size of the buffer in frames
;
#X text 24 294 Inlet 1: message: allocate <xsize> <ysize> <bytes_per_pixel>:
assume that all images in the pix_buffer will have the given dimension
and preallocate memory for them.;
#X text 12 123 The images stored in the [pix_buffer] can have different
dimensions and coulorspaces. Memory is reserved on demand \, but you
can preallocate memory with the [allocate( message.;
#X text 15 352 Outlet 1: int: size of the buffer;
#X msg 457 95 bang;
#X floatatom 457 151 5 0 0 0 - - -;
#X msg 500 99 allocate 256 256 4;
#X text 472 230 see also:;
#X obj 474 294 pix_buffer_read;
#X obj 473 269 pix_buffer_write;
#X text 64 237 list: <buffer_name> <size>;
#X obj 457 128 pix_buffer depot 10;
#X connect 18 0 25 0;
#X connect 20 0 25 0;
#X connect 25 0 19 0;
